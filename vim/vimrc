"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set nocompatible

let mapleader = ","
let g:mapleader = ","

let g:python3_host_prog = "/usr/bin/python3"

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Plugins
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
call plug#begin()

Plug 'tpope/vim-fugitive'
Plug 'preservim/tagbar'
Plug 'jremmen/vim-ripgrep'

Plug 'jlanzarotta/bufexplorer'
nnoremap <silent> <leader><Space> :BufExplorer<CR>

if has('nvim')
  Plug 'nvim-lua/plenary.nvim'
  Plug 'nvim-tree/nvim-web-devicons'
  Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}

  Plug 'stevearc/oil.nvim'
  nnoremap <silent> <C-E> :Oil<CR>

  Plug 'romgrk/barbar.nvim'

  Plug 'nvim-tree/nvim-tree.lua'
  nnoremap <silent> <C-N> :NvimTreeToggle<CR>

  Plug 'nvim-telescope/telescope.nvim'
  nnoremap <silent> <C-P> :Telescope find_files<CR>
  nnoremap <silent> <C-F> :Telescope live_grep<CR>
  nnoremap <silent> <leader>t :Telescope tags<CR>
else
  Plug 'ap/vim-buftabline'
  Plug 'amix/open_file_under_cursor.vim'

  Plug 'ctrlpvim/ctrlp.vim'
  let g:ctrlp_match_window='min:10,max:10'
  let g:ctrlp_line_prefix='  '
  let g:ctrlp_user_command=['.git', 'git -C %s ls-files -co --exclude-standard', 'find %s -type f']

  Plug 'preservim/nerdtree'
  let g:NERDTreeShowHidden=1
  let g:NERDTreeHijackNetrw=0
  let g:NERDTreeWinSize=45
  let g:NERDTreeMapJumpParent='-'
  nnoremap <silent> <C-N> :NERDTreeFocus<CR>
endif

Plug 'kqito/vim-easy-replace'
Plug 'preservim/nerdcommenter'
let g:NERDSpaceDelims=1
let g:NERDDefaultAlign = 'left'

Plug 'rhysd/vim-clang-format'
fun! EnableAutoFormat()
  if !empty(findfile('.clang-format', '.;'))
    execute 'ClangFormatAutoEnable'
  else
    execute 'ClangFormatAutoDisable'
  endif
endfun

au FileType c,cc,cpp if exists(':ClangFormat') | call EnableAutoFormat() | endif

au BufNewFile,BufRead *.vert,*.tesc,*.tese,*.glsl,*.geom,*.frag,*.comp set filetype=glsl
Plug 'tikhomirov/vim-glsl', { 'for': 'glsl' }
Plug 'rust-lang/rust.vim', { 'for': 'rust' }
Plug 'pangloss/vim-javascript', { 'for': 'javascript' }
Plug 'leafgarland/typescript-vim', { 'for': 'typescript' }
let g:typescript_indent_disable = 1

Plug 'github/copilot.vim'
let g:copilot_assume_mapped = v:true
imap <silent><script><expr> <C-Cr> copilot#Accept("\<CR>")

Plug 'ycm-core/YouCompleteMe', { 'do': ':YcmBuild'}
let g:ycm_python_binary_path = 'python'
let g:ycm_min_num_of_chars_for_completion = 1
let g:ycm_max_diagnostics_to_display = 100
let g:ycm_open_loclist_on_ycm_diags = 1
let g:ycm_confirm_extra_conf = 0
let g:ycm_auto_hover = ''
let g:ycm_clangd_args=['--header-insertion=never']
let g:ycm_error_symbol = '>>'
let g:ycm_warning_symbol = '--'

nnoremap <silent> <leader>D :exe "YcmDiags" <bar> ll1 <CR>
nnoremap <silent> <leader>f :YcmCompleter FixIt<CR>

fun! YcmBuild()
  let l:cmd = [g:plugs['YouCompleteMe']['dir'] . 'install.py']

  call add(l:cmd, '--clangd-completer')
  if executable('rustc') | call add(l:cmd, "--rust-completer") | endif
  if executable('npm') | call add(l:cmd, "--ts-completer") | endif

  let l:cmd = join(l:cmd, ' ')
  echom l:cmd

  let l:result = system(l:cmd)
  if v:shell_error == 0 | let l:result = 'Done' | endif
  redraw | echom l:result
endfun
:com! YcmBuild call YcmBuild()

if has('nvim')
  let s:doc_visible = v:false

  function s:HideDoc()
    au! hoverdoc
    call nvim_win_close(s:win, v:true)
    let s:doc_visible = v:false
  endfunction

  function ShowDoc()
    let l:response = youcompleteme#GetCommandResponse('GetDoc')
    if l:response == '' || s:doc_visible
      return
    endif

    let s:doc_visible = v:true
    let l:content = map(split(response, '\n'), '" " . v:val . " "')
    let l:height = len(l:content)
    let l:width = max(map(copy(l:content), 'strdisplaywidth(v:val)'))

    let buf = nvim_create_buf(v:false, v:true)
    call nvim_buf_set_lines(buf, 0, -1, v:true, l:content)

    let opts = {'relative': 'cursor', 'width': l:width, 'height': l:height, 'col': 0,
        \ 'row': 0, 'anchor': 'SW', 'style': 'minimal'}
    let s:win = nvim_open_win(buf, 0, opts)

    augroup hoverdoc
      au CursorMoved,CursorMovedI,WinScrolled * call s:HideDoc()
    augroup END
  endfunction

  nnoremap <silent> <leader>d :call ShowDoc()<CR>
else
  nnoremap <silent> <leader>d <plug>(YCMHover)
endif

call plug#end()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Plugin options
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

if has('nvim')
  let g:loaded_netrw = 1
  let g:barbar_auto_setup = v:false

lua << EOF
  xpcall(function()
    require("oil").setup()
  end, function(err)
  end)

  xpcall(function()
    require("nvim-tree").setup()
  end, function(err)
  end)

  xpcall(function()
    require'barbar'.setup {
      animation = false,
      clickable = false,
      icons = {
        buffer_index = false,
        buffer_number = false,
        button = '',
        modified = { button = '' },
        separator = { left = '', right = '' },
        separator_at_end = false,
        filetype = { enabled = false },
        alternate = { separator = { left = '', right = '' } },
        inactive = { separator = { left = '', right = '' } },
        visible = { separator = { left = '', right = '' } },
      },
      insert_at_end = true,
      maximum_padding = 1,
      maximum_length = 32,
      no_name_title = '*',
    }
  end, function(err)
  end)
EOF
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Configuration
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set grepprg=rg\ --vimgrep\ -S
set grepformat=%f:%l:%c:%m,%f:%l:%m

execute "silent! set <xUp>=\<Esc>[1;*A"
execute "silent! set <xDown>=\<Esc>[1;*B"
execute "silent! set <xRight>=\<Esc>[1;*C"
execute "silent! set <xLeft>=\<Esc>[1;*D"

set history=5000
set tags^=./.git/tags;
set scrolloff=7 " Minimum number of line above or below the cursor
set shm+=I "Don't show intro screen
set guicursor=i:block

if empty($STY) " Enable mouse support if not running in ssh
  set mouse=a
  set clipboard=unnamed,unnamedplus
endif

if !has('nvim')
  set viminfofile=$HOME/.vim/viminfo
endif

set langmenu=en
source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim

filetype plugin on
filetype indent on

set ffs=unix,dos,mac
set encoding=utf8

set wildmenu
set wildmode=longest,list
set wildignore=*.o,*~,*.pyc
set completeopt=menuone

set showtabline=2
set laststatus=2
set cmdheight=1
set foldcolumn=1

set switchbuf=useopen,usetab
set hidden " Hide buffer when abandoned
set nobackup
set nowb
set noswapfile
set viminfo='1024,<1000,% "Re-open buffers on startup
set autoread "Auto read when a file is changed from the outside
set autowriteall

set updatetime=1000
set timeoutlen=500
set ttimeoutlen=5

set nu " Line numbers
set rnu " Relative line numbers
set expandtab " Use spaces instead of tabs
set smarttab " Enable smart tabs
set shiftwidth=2
set tabstop=2
set ai
set si
set cino+=g0 " Don't indent access specifiers
set cino+=l1 " Case label alignment

set linebreak
set breakindent
set showbreak=>
set cpoptions+=n

set textwidth=120
set formatoptions=croqbj
set backspace=eol,start,indent
set wrap
set whichwrap+=<,>,h,l
set list
set listchars=tab:➛\ ,trail:·,extends:>,precedes:<,nbsp:+

set hlsearch
set smartcase
set ignorecase
set incsearch
set magic " Enable special characters in regex
set showmatch " Show matching brackets
set matchtime=2

set noerrorbells
set novisualbell
set t_vb=

set lazyredraw " Don't redraw while executing macros

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Config variables
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let c_space_errors = 1

let python_space_error_highlight = 1
let g:pyindent_continue = 4
let g:pyindent_open_paren = 4

let g:netrw_banner = 0
let g:netrw_fastbrowse = 0
let g:netrw_liststyle = 3

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Colors
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
syntax enable
try
  set notermguicolors
  colorscheme obscure
catch
  hi LineNr      ctermfg=DarkGray  guifg=DarkGray
  hi FoldColumn  ctermbg=None
  hi SignColumn  ctermbg=None
  hi Error       ctermfg=DarkRed   ctermbg=None cterm=Bold,Reverse
  hi ErrorMsg    ctermfg=DarkRed   ctermbg=None cterm=None
  hi WarningMsg  ctermfg=DarkYellow  ctermbg=None cterm=None

  hi TabLine      ctermfg=Gray       ctermbg=None  cterm=None
  hi TabLineFill  ctermfg=Gray       ctermbg=None  cterm=None
  hi TabLineSel   ctermfg=DarkGreen  ctermbg=None  cterm=Bold,Reverse
endtry

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Key bindings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Tags
noremap <C-g> <C-]>

" Lists
nmap <silent> <leader>n :lnext<CR>
nmap <silent> <leader>c :cnext<CR>

" Buffer management
nnoremap <silent> <M-Left> <Esc>:bp<CR>
nnoremap <silent> <M-Right> <Esc>:bn<CR>
nnoremap <silent> <leader>x :Bclose<CR>
nnoremap <silent> <leader>q :Bclose<CR>
nnoremap <silent> <leader>e :enew<CR>
nnoremap <silent> <leader>o :%bd <bar> e# <bar> bd# <CR>
nnoremap <silent> <M-Up> <Esc>:tabnext<CR>
nnoremap <silent> <M-Down> <Esc>:tabprevious<CR>

" Fast saving
nnoremap <leader>w :w!<cr>

" Window movement
noremap <C-j> <C-W>j
noremap <C-k> <C-W>k
noremap <C-h> <C-W>h
noremap <C-l> <C-W>l
noremap <C-Up> <C-W>k
noremap <C-Down> <C-W>j
noremap <C-Left> <C-W>h
noremap <C-Right> <C-W>l

" Window splitting
noremap <leader>v :vsplit<CR>
noremap <leader>s :split<CR>

" Text manipulation
nnoremap x "_d
nnoremap xx "_dd
nnoremap <S-x> "_D
vnoremap x "_d
vnoremap <S-x> "_D
noremap <silent> <S-Up> <Esc>:m .-2<CR>
noremap <silent> <S-Down> <Esc>:m .+1<CR>

" Remove the Windows ^M
noremap <Leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm

" Toggle paste mode on and off
map <leader>p :setlocal paste!<cr>

" First non-blank character
map 0 ^

" Visual mode pressing * or # searches for the current selection
vnoremap <silent> * :call VisualSelection()<CR>/<C-R>=@/<CR><CR>
vnoremap <silent> # :call VisualSelection()<CR>?<C-R>=@/<CR><CR>

" Visual mode sort lines
vnoremap <silent> s :sort<CR>
vnoremap <silent> f :!clang-format<CR>

" Map <Space> to / (search) and Shift-<Space> to ? (backwards search)
map <space> /
map <S-space> ?

" Clear highlight when <leader><cr> is pressed
map <silent> <leader><cr> :noh<cr>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Custom commands
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if has("autocmd")
  au FileType gitcommit set viminfo=

  " Delete trailing whitespace when writing buffer contents of certain file types
  au BufWritePre * :call RemoveTrailingSpaces()

  " Return to last edit position when opening files
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

  augroup quickfix
    au!
    au QuickFixCmdPost [^l]* copen
    au QuickFixCmdPost l* lopen
  augroup END

  au FileType qf :call QuickfixHighlight()

  au BufLeave * :call BufferPrune()
endif

" :W sudo saves the file
com! W execute 'silent! w !sudo -S tee % > /dev/null' <bar> e!

" Don't close window, when deleting a buffer
com! Bclose call <SID>BufferClose()

" Make grep silent
cnoreabbrev <expr> grep  (getcmdtype() ==# ':' && getcmdline() =~# '^grep')  ? 'silent! grep'  : 'grep'
cnoreabbrev <expr> lgrep (getcmdtype() ==# ':' && getcmdline() =~# '^lgrep') ? 'silent! lgrep' : 'lgrep'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Helper functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Delete trailing white space
fun! RemoveTrailingSpaces()
  if (&ft=="diff" || &ft=="patch" || &ft=="gitsendemail")
    return
  endif

  let l:save_cursor = getpos(".")
  keepp %s/\s\+$//e
  silent! execute prevnonblank('$') + 1 . ',$delete _'
  call setpos('.', l:save_cursor)
endfun

" Delete buffer without closing window
fun! <SID>BufferClose()
  let l:currentBufNum = bufnr("%")
  let l:alternateBufNum = bufnr("#")

  if buflisted(l:alternateBufNum)
    buffer #
  else
    bnext
  endif

  if bufnr("%") == l:currentBufNum
    new
  endif

  exe "bdelete! ".l:currentBufNum
endfun

fun! BufferPrune()
  let l:buf = bufnr("%")
  if getbufvar(l:buf, "&mod") == 0 && empty(bufname(l:buf))
    set nobuflisted
  endif
endfun

fun! VisualSelection() range
  let l:saved_reg = @"
  execute "normal! vgvy"

  let l:pattern = escape(@", "\\/.*'$^~[]")

  let @/ = l:pattern
  let @" = l:saved_reg
endfun

function! QuickfixHighlight()
  let g:quickfix = getmatches()
endfunc

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => StatusLine
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
hi StatusLine            ctermfg=White       ctermbg=None        cterm=None
hi StatusLineNormal      ctermfg=0           ctermbg=76          cterm=None
hi StatusLineInsert      ctermfg=0           ctermbg=75          cterm=None
hi StatusLineVisual      ctermfg=0           ctermbg=214         cterm=None
hi StatusLineReplace     ctermfg=0           ctermbg=203         cterm=None
hi StatusLineCommand     ctermfg=0           ctermbg=DarkYellow  cterm=None
hi StatusLineFlags       ctermfg=203         ctermbg=None        cterm=None
hi StatusLinePercent     ctermfg=235         ctermbg=248         cterm=None
hi StatusLineLocation    ctermfg=248         ctermbg=238         cterm=None

hi StatusLineNC          ctermfg=DarkGray    ctermbg=None        cterm=None
hi StatusLineFlagsNC     ctermfg=DarkGray    ctermbg=None        cterm=None
hi StatusLinePercentNC   ctermfg=235         ctermbg=241         cterm=None
hi StatusLineLocationNC  ctermfg=235         ctermbg=238         cterm=None

let g:sl_modemap = {
    \ 'n': 'Normal',
    \ 'i': 'Insert',
    \ 'R': 'Replace',
    \ 'v': 'Visual',
    \ 'V': 'Visual',
    \ "\<c-v>": 'Visual',
    \ 's': 'Visual',
    \ 'S': 'Visual',
    \ "\<c-s>": 'Visual',
    \ 'c': 'Command',
    \ 'r': 'Command',
    \ 't': 'Command',
    \ '!': 'Command',
  \}

fun! StatusLineColor(name)
  return '%#StatusLine'.a:name.(g:statusline_winid ==# win_getid() ? '' : 'NC').'#'
endf

fun! StatusLineMode()
  let l:mode=get(g:sl_modemap, mode(), '')
  return StatusLineColor(l:mode).(g:statusline_winid ==# win_getid() ? ' '.toupper(l:mode).' ' : '').(&paste ? '| PASTE ' : '').'%*'
endf

fun! StatusLineFlags()
  return StatusLineColor('Flags').'%h%w%r%m%*'
endf

fun! StatusLineLocation()
  return StatusLineColor('Percent').' %3p%% '.StatusLineColor('Location').' %4l:%-2c | %L '
endf

fun! StatusLine()
  return StatusLineMode().' %t '.StatusLineFlags().'%=%{&fileformat} | %{&encoding} | %{!empty(&ft) ? &ft : "none"} '.StatusLineLocation()
endf

set statusline=%!StatusLine()
